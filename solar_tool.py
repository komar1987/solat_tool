# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2023-09-15 15:22:10
"""
import arcpy
from arcpy.sa import *
from sys import argv

def Model(Building="C:\\Users\\Javan002\\Desktop\\Solar_DistrictScale\\Solar_21MARCH\\Solar_21MARCH.gdb\\Input\\Building",
          Protected_Buildings="C:\\Users\\Javan002\\Desktop\\Solar_DistrictScale\\Solar_21MARCH\\Solar_21MARCH.gdb\\Input\\Protected_Build", 
          District_Boundary="CaseStudy", BilbaoDEM_tif="C:\\Users\\Javan002\\Desktop\\Solar_DistrictScale\\Solar_21MARCH\\MergeDEM\\BilbaoDEM.tif", 
          Time_configuration="WithinDay 80 13 14", Area_Limits="Area_Dis >= 6", Aspect_Limits="VALUE > 22.5 And VALUE < 337.5", Slope_Minimum="VALUE <= 10", 
          Radiation_Limits="VALUE >= 0", Slope_Limits="VALUE <= 45", Input_Join_Field="Code", Zone_field="Code"):  # Solar Tool Tecnalia

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = False

    # Check out any necessary licenses.
    arcpy.CheckOutExtension("spatial")
    arcpy.CheckOutExtension("3D")
    arcpy.CheckOutExtension("ImageAnalyst")
    arcpy.CheckOutExtension("ImageExt")

    arcpy.ImportToolbox(r"c:\program files\arcgis\pro\Resources\ArcToolbox\toolboxes\Data Management Tools.tbx")

    # Process: Area Solar Radiation (Area Solar Radiation) (sa)
    Solar_Rad5 = fr"{arcpy.env.scratchGDB}\Solar_Rad5"
    Area_Solar_Radiation = Solar_Rad5
    Solar = ""
    Output_diffuse_radiation_raster = ""
    Output_direct_duration_raster = ""
    with arcpy.EnvManager(extent="503133,981327626 4791149,70808328 503426,382900195 4791594,02744803 PROJCS["WGS_1984_UTM_Zone_30N",GEOGCS["GCS_WGS_1984"
    ,DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Transverse_Mercator"],
    PARAMETER["False_Easting",500000.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",-3.0],PARAMETER["Scale_Factor",0.9996],
    PARAMETER["Latitude_Of_Origin",0.0],UNIT["Meter",1.0]]", mask="CaseStudy", outputCoordinateSystem="PROJCS["WGS_1984_UTM_Zone_30N",
    GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Transverse_Mercator"],
    PARAMETER["False_Easting",500000.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",-3.0],PARAMETER["Scale_Factor",0.9996],PARAMETER["Latitude_Of_Origin",0.0],UNIT["Meter",1.0]]"):
        Solar_Rad5 = arcpy.sa.AreaSolarRadiation(in_surface_raster=BilbaoDEM_tif, latitude=43,2537710690188, sky_size=200, time_configuration=Time_configuration, day_interval=14,
                                                 hour_interval=1, each_interval="NOINTERVAL", z_factor=1, slope_aspect_input_type="FROM_DEM", calculation_directions=16, zenith_divisions=8, 
                                                 azimuth_divisions=8, diffuse_model_type="UNIFORM_SKY", diffuse_proportion=0,3, transmittivity=0,5, out_direct_radiation_raster=Solar, 
                                                 out_diffuse_radiation_raster=Output_diffuse_radiation_raster, out_direct_duration_raster=Output_direct_duration_raster)
        Solar_Rad5.save(Area_Solar_Radiation)


    # Process: Aspect (Aspect) (sa)
    Aspect_2_ = fr"{arcpy.env.scratchGDB}\Aspect"
    Aspect = Aspect_2_
    with arcpy.EnvManager(mask=District_Boundary):
        Aspect_2_ = arcpy.sa.Aspect(in_raster=BilbaoDEM_tif, method="PLANAR", z_unit="METER", project_geodesic_azimuths="GEODESIC_AZIMUTHS")
        Aspect_2_.save(Aspect)


    # Process: Slope (Slope) (sa)
    Slope_2_ = fr"{arcpy.env.scratchGDB}\Slope"
    Slope = Slope_2_
    with arcpy.EnvManager(extent="503133,981327626 4791149,70808328 503426,382900195 4791594,02744803 PROJCS["WGS_1984_UTM_Zone_30N",
                          GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],
                                 PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Transverse_Mercator"],
                                 PARAMETER["False_Easting",500000.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",-3.0],
                                 PARAMETER["Scale_Factor",0.9996],PARAMETER["Latitude_Of_Origin",0.0],UNIT["Meter",1.0]]", mask=District_Boundary):
        Slope_2_ = arcpy.sa.Slope(in_raster=BilbaoDEM_tif, output_measurement="DEGREE", z_factor=1, method="PLANAR", z_unit="METER")
        Slope_2_.save(Slope)


    # Process: Con (Con) (sa)
    Solar_RS = fr"{arcpy.env.scratchGDB}\Solar_RS"
    Con = Solar_RS
    with arcpy.EnvManager(extent="503133,981327626 4791149,70808328 503426,382900195 4791594,02744803 PROJCS["WGS_1984_UTM_Zone_30N",
                          GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],
                                 UNIT["Degree",0.0174532925199433]],PROJECTION["Transverse_Mercator"],PARAMETER["False_Easting",500000.0],
                                 PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",-3.0],PARAMETER["Scale_Factor",0.9996],PARAMETER["Latitude_Of_Origin",0.0],UNIT["Meter",1.0]]"):
        Solar_RS = arcpy.sa.Con(in_conditional_raster=Slope_2_, in_true_raster_or_constant=Solar_Rad5, in_false_raster_or_constant="", where_clause=Slope_Limits)
        Solar_RS.save(Con)


    # Process: Con (3) (Con) (sa)
    Solar_RSH = fr"{arcpy.env.scratchGDB}\Solar_RSH"
    Con_3_ = Solar_RSH
    with arcpy.EnvManager(extent="503133,981327626 4791149,70808328 503426,382900195 4791594,02744803 PROJCS["WGS_1984_UTM_Zone_30N",
                          GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],
                                 UNIT["Degree",0.0174532925199433]],PROJECTION["Transverse_Mercator"],PARAMETER["False_Easting",500000.0],
                                 PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",-3.0],PARAMETER["Scale_Factor",0.9996],PARAMETER["Latitude_Of_Origin",0.0],UNIT["Meter",1.0]]"):
        Solar_RSH = arcpy.sa.Con(in_conditional_raster=Solar_Rad5, in_true_raster_or_constant=Solar_RS, in_false_raster_or_constant="", where_clause=Radiation_Limits)
        Solar_RSH.save(Con_3_)


    # Process: Con (2) (Con) (sa)
    Solar_LS = fr"{arcpy.env.scratchGDB}\Solar_LS"
    Con_2_ = Solar_LS
    Solar_LS = arcpy.sa.Con(in_conditional_raster=Slope_2_, in_true_raster_or_constant=Solar_RSH, in_false_raster_or_constant="", where_clause=Slope_Minimum)
    Solar_LS.save(Con_2_)


    # Process: Con (4) (Con) (sa)
    Solar_RSHF = fr"{arcpy.env.scratchGDB}\Solar_RSHF"
    Con_4_ = Solar_RSHF
    Solar_RSHF = arcpy.sa.Con(in_conditional_raster=Aspect_2_, in_true_raster_or_constant=Solar_RSH, in_false_raster_or_constant=Solar_LS, where_clause=Aspect_Limits)
    Solar_RSHF.save(Con_4_)


    # Process: Extract by Mask (2) (Extract by Mask) (sa)
    Solar_B = fr"{arcpy.env.scratchGDB}\Solar_B"
    Extract_by_Mask_2_ = Solar_B
    with arcpy.EnvManager(extent="MAXOF"):
        Solar_B = arcpy.sa.ExtractByMask(in_raster=Solar_RSHF, in_mask_data=Building, extraction_area="INSIDE", analysis_extent="DEFAULT")
        Solar_B.save(Extract_by_Mask_2_)


    # Process: Raster Calculator (2) (Raster Calculator) (sa)
    Solar_B_round = fr"{arcpy.env.scratchGDB}\Solar_B_round"
    Raster_Calculator_2_ = Solar_B_round
    Solar_B_round = Solar_B*1000000
    Solar_B_round.save(Raster_Calculator_2_)


    # Process: Int (Int) (sa)
    Solar_B_int = fr"{arcpy.env.scratchGDB}\Solar_B_int"
    Int = Solar_B_int
    Solar_B_int = arcpy.sa.Int(in_raster_or_constant=Solar_B_round)
    Solar_B_int.save(Int)


    # Process: Raster to Polygon (Raster to Polygon) (conversion)
    Solar_B_Vector = fr"{arcpy.env.scratchGDB}\Solar_B_Vector"
    with arcpy.EnvManager(outputMFlag="Disabled", outputZFlag="Disabled"):
        arcpy.conversion.RasterToPolygon(in_raster=Solar_B_int, out_polygon_features=Solar_B_Vector, simplify="SIMPLIFY", 
                                         raster_field="VALUE", create_multipart_features="SINGLE_OUTER_PART", max_vertices_per_feature=None)

    # Process: Dissolve (Dissolve) (management)
    Solar_B_Dis = fr"{arcpy.env.scratchGDB}\Solar_B_Dis"
    arcpy.management.Dissolve(in_features=Solar_B_Vector, out_feature_class=Solar_B_Dis, dissolve_field=["Shape_Area"], 
                              statistics_fields=[], multi_part="MULTI_PART", unsplit_lines="DISSOLVE_LINES", concatenation_separator="")

    # Process: Select Layer By Attribute (Select Layer By Attribute) (management)
    Solar_B_Dis_Layer1, Count = arcpy.management.SelectLayerByAttribute(in_layer_or_view=Solar_B_Dis, selection_type="NEW_SELECTION", 
                                                                        where_clause="OBJECTID IS NOT NULL", invert_where_clause="")

    # Process: Multipart To Singlepart (Multipart To Singlepart) (management)
    Solar_B_Explode = fr"{arcpy.env.scratchGDB}\Solar_B_Explode"
    arcpy.management.MultipartToSinglepart(in_features=Solar_B_Dis_Layer1, out_feature_class=Solar_B_Explode)

    # Process: Clip (Clip) (analysis)
    Solar_B_Clip = fr"{arcpy.env.scratchGDB}\Solar_B_Clip"
    arcpy.analysis.Clip(in_features=Building, clip_features=Solar_B_Explode, out_feature_class=Solar_B_Clip, cluster_tolerance="")

    # Process: Select Layer By Attribute (2) (Select Layer By Attribute) (management)
    Solar_B_Clip_Layer2, Count_2_ = arcpy.management.SelectLayerByAttribute(in_layer_or_view=Solar_B_Clip, 
                                                                            selection_type="NEW_SELECTION", where_clause="OBJECTID IS NOT NULL", invert_where_clause="")

    # Process: Multipart To Singlepart (2) (Multipart To Singlepart) (management)
    Solar_B_Dis_2 = fr"{arcpy.env.scratchGDB}\Solar_B_Dis_2"
    arcpy.management.MultipartToSinglepart(in_features=Solar_B_Clip_Layer2, out_feature_class=Solar_B_Dis_2)

    # Process: Add Field (Add Field) (management)
    Solar_B_Dis_2_3_ = arcpy.management.AddField(in_table=Solar_B_Dis_2, field_name="Area_Dis", field_type="DOUBLE", 
                                                 field_precision=2, field_scale=None, field_length=None, field_alias="", 
                                                 field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")[0]

    # Process: Calculate Geometry Attributes (Calculate Geometry Attributes) (management)
    Solar_B_Dis_2_4_ = arcpy.management.CalculateGeometryAttributes(in_features=Solar_B_Dis_2_3_, geometry_property=[["Area_Dis", "AREA_GEODESIC"]], 
                                                                    length_unit="", area_unit="SQUARE_METERS", coordinate_system="", coordinate_format="SAME_AS_INPUT")[0]

    # Process: Calculate Field (12) (Calculate Field) (management)
    Solar_B_Dis_2_5_ = arcpy.management.CalculateField(in_table=Solar_B_Dis_2_4_, field="Area_Dis", expression="0 if !Area_Dis! is None else !Area_Dis!", 
                                                       expression_type="PYTHON3", code_block="", field_type="TEXT", enforce_domains="NO_ENFORCE_DOMAINS")[0]

    # Process: Select Layer By Attribute (3) (Select Layer By Attribute) (management)
    Solar_B_Dis_2_Layer, Count_3_ = arcpy.management.SelectLayerByAttribute(in_layer_or_view=Solar_B_Dis_2_5_, 
                                                                            selection_type="NEW_SELECTION", where_clause=Area_Limits, invert_where_clause="")

    # Process: Copy Features (4) (Copy Features) (management)
    Building_CopyFeatures = fr"{arcpy.env.scratchGDB}\Building_CopyFeatures"
    arcpy.management.CopyFeatures(in_features=Building, out_feature_class=Building_CopyFeatures, config_keyword="", 
                                  spatial_grid_1=None, spatial_grid_2=None, spatial_grid_3=None)

    # Process: Add Field (3) (Add Field) (management)
    Building_CopyFeatures_3_ = arcpy.management.AddField(in_table=Building_CopyFeatures, field_name="Area_Building", field_type="DOUBLE", 
                                                         field_precision=6, field_scale=None, field_length=None, field_alias="", 
                                                         field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")[0]

    # Process: Calculate Geometry Attributes (2) (Calculate Geometry Attributes) (management)
    Buildings_2_ = arcpy.management.CalculateGeometryAttributes(in_features=Building_CopyFeatures_3_, 
                                                                geometry_property=[["Area_Building", "AREA_GEODESIC"]], length_unit="", 
                                                                area_unit="SQUARE_METERS", coordinate_system="", coordinate_format="SAME_AS_INPUT")[0]

    # Process: Feature To Point (Feature To Point) (management)
    Solar_B_Dis_2_Point = fr"{arcpy.env.scratchGDB}\Solar_B_Dis_2_Point"
    arcpy.management.FeatureToPoint(in_features=Solar_B_Dis_2_Layer, out_feature_class=Solar_B_Dis_2_Point, point_location="INSIDE")

    # Process: Spatial Join (Spatial Join) (analysis)
    Building_PV_Jo = fr"{arcpy.env.scratchGDB}\Building_PV_Jo"
    arcpy.analysis.SpatialJoin(target_features=Buildings_2_, join_features=Solar_B_Dis_2_Point, out_feature_class=Building_PV_Jo, 
                               join_operation="JOIN_ONE_TO_ONE", join_type="KEEP_ALL", 
                               field_mapping="fid_1 \"fid_1\" true true false 8 Double 0 0,First,#,C:\\Solar_DistrictScale\\Solar_21MARCH\\scratch.gdb\\Building_CopyFeatures,fid_1,-1,-1;Project_ID \"Project_ID\" true true false 254 Text 0 0,First,#,C:\\Solar_DistrictScale\\Solar_21MARCH\\scratch.gdb\\Building_CopyFeatures,Project_ID,0,254;Building_I \"Building_I\" true true false 254 Text 0 0,First,#,C:\\Solar_DistrictScale\\Solar_21MARCH\\scratch.gdb\\Building_CopyFeatures,Building_I,0,254;Shape_Length \"Shape_Length\" false true true 8 Double 0 0,First,#,C:\\Solar_DistrictScale\\Solar_21MARCH\\scratch.gdb\\Building_CopyFeatures,Shape_Length,-1,-1;Shape_Area \"Shape_Area\" false true true 8 Double 0 0,First,#,C:\\Solar_DistrictScale\\Solar_21MARCH\\scratch.gdb\\Building_CopyFeatures,Shape_Area,-1,-1;Area_Building \"Area_Building\" true true false 8 Double 0 0,First,#,C:\\Solar_DistrictScale\\Solar_21MARCH\\scratch.gdb\\Building_CopyFeatures,Area_Building,-1,-1;Area_Dis \"Area_Dis\" true true false 0 Text 0 0,First,#,C:\\Solar_DistrictScale\\Solar_21MARCH\\scratch.gdb/Solar_B_Dis_2_Point,Area_Dis,0,0;ORIG_FID \"ORIG_FID\" true true false 0 Long 0 0,First,#,C:\\Solar_DistrictScale\\Solar_21MARCH\\scratch.gdb/Solar_B_Dis_2_Point,ORIG_FID,-1,-1", match_option="INTERSECT", search_radius="", distance_field_name="")

    # Process: Calculate Field (10) (Calculate Field) (management)
    Building_PV_Join_10_ = arcpy.management.CalculateField(in_table=Building_PV_Jo, field="Area_Dis", 
                                                           expression="RemoveNullInt(!Area_Dis!)", expression_type="PYTHON3", code_block="""def RemoveNullInt(Area_Dis):
    if Area_Dis is None:
        return 0
    else:
        return Area_Dis""", field_type="TEXT", enforce_domains="NO_ENFORCE_DOMAINS")[0]

    # Process: Add Field (2) (Add Field) (management)
    Building_PV_Jo_2_ = arcpy.management.AddField(in_table=Building_PV_Join_10_, field_name="Area_Ratio", 
                                                  field_type="DOUBLE", field_precision=3, field_scale=None, field_length=None, field_alias="", 
                                                  field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")[0]

    # Process: Calculate Field (Calculate Field) (management)
    Building_PV_Join_5_ = arcpy.management.CalculateField(in_table=Building_PV_Jo_2_, field="Area_Ratio", 
                                                          expression="!Area_Dis! / !Area_Building!", expression_type="PYTHON3", code_block="", 
                                                          field_type="FLOAT", enforce_domains="NO_ENFORCE_DOMAINS")[0]

    # Process: Add Field (4) (Add Field) (management)
    Building_PV_Join_2_ = arcpy.management.AddField(in_table=Building_PV_Join_5_, field_name="PV_Ratio", field_type="FLOAT", field_precision=2, 
                                                    field_scale=None, field_length=None, field_alias="", field_is_nullable="NULLABLE", 
                                                    field_is_required="NON_REQUIRED", field_domain="")[0]

    # Process: Calculate Field (3) (Calculate Field) (management)
    Building_PV_Join_6_ = arcpy.management.CalculateField(in_table=Building_PV_Join_2_, field="Area_Ratio", 
                                                          expression="RemoveNullInt(!Area_Ratio!)", expression_type="PYTHON3", code_block="""def RemoveNullInt(Area_Ratio):
    if Area_Ratio is None:
        return 0
    else:
        return Area_Ratio""", field_type="TEXT", enforce_domains="NO_ENFORCE_DOMAINS")[0]

    # Process: Calculate Field (2) (Calculate Field) (management)
    Building_PV_Join_7_ = arcpy.management.CalculateField(in_table=Building_PV_Join_6_, field="PV_Ratio", expression="CalcEdit(!Area_Ratio!)", 
                                                          expression_type="PYTHON3", code_block="""def CalcEdit(Area_Ratio):
   if Area_Ratio >= 0.335:
      return 0.335
   elif Area_Ratio >=0 and Area_Ratio <0.335:
      return Area_Ratio
   else:
      return 0""", field_type="FLOAT", enforce_domains="NO_ENFORCE_DOMAINS")[0]

    # Process: Add Field (5) (Add Field) (management)
    Building_PV_Join_8_ = arcpy.management.AddField(in_table=Building_PV_Join_7_, field_name="PV_Area", field_type="LONG", 
                                                    field_precision=None, field_scale=None, field_length=None, field_alias="", 
                                                    field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")[0]

    # Process: Calculate Field (4) (Calculate Field) (management)
    Building_PV_Join_9_ = arcpy.management.CalculateField(in_table=Building_PV_Join_8_, field="PV_Area", expression="!PV_Ratio! * !Area_Building!", 
                                                          expression_type="PYTHON3", code_block="", field_type="TEXT", enforce_domains="NO_ENFORCE_DOMAINS")[0]

    # Process: Add Attribute Index (Add Attribute Index) (management)
    Building_PV_Copy_2_ = arcpy.management.AddIndex(in_table=Building_PV_Join_9_, fields=["Code"], index_name="co", 
                                                    unique="NON_UNIQUE", ascending="NON_ASCENDING")[0]

    # Process: Copy Features (Copy Features) (management)
    Building_PV_Copy = fr"{arcpy.env.scratchGDB}\Building_PV_Copy"
    arcpy.management.CopyFeatures(in_features=Building_PV_Copy_2_, out_feature_class=Building_PV_Copy, config_keyword="", 
                                  spatial_grid_1=None, spatial_grid_2=None, spatial_grid_3=None)

    # Process: Zonal Statistics as Table (Zonal Statistics as Table) (ia)
    Zonal_Statistics = fr"{arcpy.env.scratchGDB}\Zonal_Statistics"
    with arcpy.EnvManager(extent="MAXOF"):
        arcpy.ia.ZonalStatisticsAsTable(in_zone_data=Solar_B_Dis_2_Layer, zone_field=Zone_field, in_value_raster=Solar_B, 
                                        out_table=Zonal_Statistics, ignore_nodata="DATA", statistics_type="MEAN", process_as_multidimensional="CURRENT_SLICE", 
                                        percentile_values=[90], percentile_interpolation_type="AUTO_DETECT", circular_calculation="ARITHMETIC", circular_wrap_value=360)
        .save(Zonal_Statistics_as_Table)


    # Process: Add Join (Add Join) (management)
    Building_PV_Copy_Layer = arcpy.management.AddJoin(in_layer_or_view=Building_PV_Copy, in_field=Input_Join_Field, 
                                                      join_table=Zonal_Statistics, join_field=Zone_field, join_type="KEEP_ALL", 
                                                      index_join_fields="NO_INDEX_JOIN_FIELDS")[0]

    # Process: Copy Features (2) (Copy Features) (management)
    Building_PV_Estimation = fr"{arcpy.env.scratchGDB}\Building_PV_Estimation"
    arcpy.management.CopyFeatures(in_features=Building_PV_Copy_Layer, out_feature_class=Building_PV_Estimation, 
                                  config_keyword="", spatial_grid_1=None, spatial_grid_2=None, spatial_grid_3=None)

    # Process: Select Layer By Location (Select Layer By Location) (management)
    Building_PV_Estimation_Layer1, Output_Layer_Names, Count_4_ = arcpy.management.SelectLayerByLocation(in_layer=[Building_PV_Estimation], 
                                                                                                         overlap_type="INTERSECT", select_features=Protected_Buildings, 
                                                                                                         search_distance="", selection_type="NEW_SELECTION", 
                                                                                                         invert_spatial_relationship="NOT_INVERT")

    # Process: Calculate Field (8) (Calculate Field) (management)
    Building_PV_Estimation_Layer1_2_ = arcpy.management.CalculateField(in_table=Building_PV_Estimation_Layer1, 
                                                                       field="Zonal_Statistics_MEAN", expression="0", expression_type="PYTHON3", 
                                                                       code_block="", field_type="TEXT", enforce_domains="NO_ENFORCE_DOMAINS")[0]

    # Process: Select Layer By Attribute (4) (Select Layer By Attribute) (management)
    Building_PV_Estimation_Layer_2_, Count_5_ = arcpy.management.SelectLayerByAttribute(in_layer_or_view=Building_PV_Estimation_Layer1_2_, 
                                                                                        selection_type="CLEAR_SELECTION", where_clause="", invert_where_clause="")

    # Process: Calculate Field (6) (Calculate Field) (management)
    Building_PV_Estimation_Layer3 = arcpy.management.CalculateField(in_table=Building_PV_Estimation_Layer_2_, field="Zonal_Statistics_MEAN", 
                                                                    expression="RemoveNullInt(!Zonal_Statistics_MEAN!)", expression_type="PYTHON3", 
                                                                    code_block="""def RemoveNullInt(Zonal_Statistics_MEAN):
    if Zonal_Statistics_MEAN is None:
        return 0
    else:
        return Zonal_Statistics_MEAN
""", field_type="TEXT", enforce_domains="NO_ENFORCE_DOMAINS")[0]

    # Process: Add Field (6) (Add Field) (management)
    Building_PV_Estimation_Layer_3_ = arcpy.management.AddField(in_table=Building_PV_Estimation_Layer3, 
                                                                field_name="Radiation_Kwh", field_type="FLOAT", field_precision=2, field_scale=None, field_length=None, 
                                                                field_alias="", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")[0]

    # Process: Calculate Field (5) (Calculate Field) (management)
    Building_PV_Estimation_3_ = arcpy.management.CalculateField(in_table=Building_PV_Estimation_Layer_3_, field="Radiation_Kwh", 
                                                                expression="!Building_PV_Copy_PV_Area!*!Zonal_Statistics_MEAN!", expression_type="PYTHON3", 
                                                                code_block="", field_type="TEXT", enforce_domains="NO_ENFORCE_DOMAINS")[0]

    # Process: Add Field (7) (Add Field) (management)
    Building_PV_Estimation_Layer = arcpy.management.AddField(in_table=Building_PV_Estimation_3_, field_name="Power", 
                                                             field_type="FLOAT", field_precision=2, field_scale=None, field_length=None, field_alias="", 
                                                             field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")[0]

    # Process: Calculate Field (7) (Calculate Field) (management)
    Building_PV_Estimation_6_ = arcpy.management.CalculateField(in_table=Building_PV_Estimation_Layer, field="Power", 
                                                                expression="(!Radiation_Kwh!*0.194*0.95)", expression_type="PYTHON3", code_block="", 
                                                                field_type="TEXT", enforce_domains="NO_ENFORCE_DOMAINS")[0]

    # Process: Copy Features (3) (Copy Features) (management)
    Rad_District = "C:\\Users\\Javan002\\Desktop\\Solar_DistrictScale\\Solar_21MARCH\\Solar_21MARCH.gdb\\Rad_District"
    arcpy.management.CopyFeatures(in_features=Building_PV_Estimation_6_, out_feature_class=Rad_District, config_keyword="", 
                                  spatial_grid_1=None, spatial_grid_2=None, spatial_grid_3=None)

if __name__ == '__main__':
    # Global Environment settings
    with arcpy.EnvManager(scratchWorkspace=r"C:\Users\Javan002\Documents\ArcGIS\Projects\MyProject1\MyProject1.gdb", workspace=r"C:\Users\Javan002\Documents\ArcGIS\Projects\MyProject1\MyProject1.gdb"):
        Model(*argv[1:])
